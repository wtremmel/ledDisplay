#!/usr/bin/perl

$configfile = "./ledDisplayd.conf";
$debug = 1;


if (!$debug) {
  use Proc::Daemon;
  $pid = Proc::Daemon::Init;
  exit if $pid;
}

use Config::Simple;
$cfg = new Config::Simple($configfile);

use LWP::Simple;
use JSON;
use POSIX qw(strftime);

$subscribe = $cfg->param("subscribe");
$device = $cfg->param("device");
$mqtthost = $cfg->param("mqtthost");
$hell = $cfg->param("fullBrightness");
$dimmed = $cfg->param("dimmedBrightness");
$leds = $cfg->param("leds");
$googleKey =  $cfg->param("GoogleAPIKey");

$routeSource=$cfg->param("routeSource");
$routeDestination=$cfg->param("routeDestination");

$lastMotion = 0;
$lastLight = 5;
$lastTemp = 20;
$lastHumidity = 20;
$full = $hell;

$stauUrl = 'https://maps.googleapis.com/maps/api/distancematrix/json?' .
'units=metric' .
'&origins=' . $routeSource . 
'&destinations=' . $routeDestination . 
'&mode=driving' .
'&departure_time=now' .
'&traffic_model=pessimistic' .
'&key=' . $googleKey;



open(M,"mosquitto_sub -h $mqtthost -v -t $subscribe |");
&switchLedsOff();

while (<M>) {
  my $now = time;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  
  # print $_;
  if (/motion (\d)/) {
    my $thisMotion = $1;
    if ($lastMotion != $thisMotion) {
      if ($thisMotion == 0) {
	print strftime('%Y-%m-%d %H:%M:%S', localtime()) if $debug;
	print ": Motion stopped\n" if $debug;
        &switchLedsOff();
      } else {
	print strftime('%Y-%m-%d %H:%M:%S', localtime()) if $debug;
	print ": Motion started\n" if $debug;
        # display something depending on time of day
	# in the morning on weekdays display travel time to work
	if ($wday >= 1 && $wday <= 5 && $hour >= 7 && $hour <= 8) {
	  my $stau = &getStauDuration();
	  print "Stau auf A661: $stau minutes\n" if $debug;
	  &displayStau($stau);
	  $ledsRefreshed = $now;
	}
	# if its dark make some light
	elsif ($lastLight == 0) {
	  &allLedsWhite();
	} else {
	  print "Motion: Temperature $lastTemp shown\n" if $debug;
	  &displayTemperature($lastTemp);
	}
      }
      $lastMotion = $thisMotion;
    }
    elsif ($thisMotion == 1) { # no change but still motion
      print strftime('%Y-%m-%d %H:%M:%S', localtime()) if $debug;
      print ": Motion continues\n" if $debug;
      if ($ledsareon && $displaying eq "stau" && ($now - $ledsRefreshed) > 60) {
	$stau =  &getStauDuration();
	print "Refreshing Stau auf A661: $stau minutes\n" if $debug;
	&displayStau($stau);
	$ledsRefreshed = $now;
      } elsif ($ledsareon && $displaying eq "temperature" && ($now - $ledsRefreshed) > 60) {
	print "Refresh: Humidity $lastHumidity shown\n" if $debug;
	&displayHumidity($lastHumidity);
	$ledsRefreshed = $now;
      } elsif ($ledsareon && $displaying eq "humidity" && ($now - $ledsRefreshed) > 60) {
	print "Refresh: Temperature $lastTemp shown\n" if $debug;
	&displayTemperature($lastTemp);
	$ledsRefreshed = $now;
      }
    }
  } elsif (/light (\d+)/) {
    if ($1 != $lastLight) {
      # print "Light has changed $lastLight -> $1\n" if $debug;
      # not dark and LEDs -> turn off
      if ($lastLight > 10 && $displaying eq "allWhite") { 
	&switchLedsOff();
      }
      # dark, no LEDs and motion -> turn on
      if ($1 <= 1 && !$ledsareon && $lastMotion) {
	&allLedsWhite();
      }
      $lastLight = $1;
    }
  } elsif (/temperature (\d+)/) {
    $lastTemp = $1;
  } elsif (/humidity (\d+)/) {
    $lastHumidity = $1;
  }
}

sub switchLedsOff {
  if ($ledsareon) {
    system("mosquitto_pub -h $mqtthost -t $device -m ledsoff");
  }
  $ledsareon = 0;
  $displaying = "";
}

sub switchLedsOn {
  my $i;
  open(O,"|mosquitto_pub -h $mqtthost -t $device -s");
  print O "ledb ";
  for ($i=0; $i<$leds; $i++) {
    print O pack("CCC",$r[$i],$g[$i],$b[$i]);
  }
  close O ;
  $ledsareon = 1;
}

sub allLedsWhite {
  my $i;
  if ($displaying ne "allWhite") {
    print strftime('%Y-%m-%d %H:%M:%S', localtime()) if $debug;
    print ": Switching all LEDS to white\n" if $debug;
    for ($i=0; $i<$leds;$i++) {
      $r[$i] = $full;
      $g[$i] = $full;
      $b[$i] = $full;
    }
    $displaying = "allWhite";
    # &switchLedsOn();
  }
}

sub getStauDuration {
  my $content = get($stauUrl);
  my $myscalar = from_json($content);

  my $normalduration =  $myscalar->{rows}[0]->{elements}[0]->{duration}->{value};
  my $stauduration = $myscalar->{rows}[0]->{elements}[0]->{duration_in_traffic}->{value};

  return int(($stauduration - $normalduration) / 60);
}


sub displayStau {
  my $t = shift;
  my $div = 5;

  for ($i = 0; $i < $leds; $i++) {
    $b[$i] = $full;
    $r[$i] = 0;
    $g[$i] = 0;
  }

  my $pos = 0;
  my $mod = $t % $div;
  if ($t > $div) {
    $mod = $div if !$mod;
    for ($i=0; $i < int($t / $div); $i++) {
      $r[$pos] = $full;
      $b[$pos] = 0;
      $pos++;
    }
  }

  for ($i = 0; $i < $mod; $i++) {
    $r[$pos] = $full;
    $b[$pos] = 0;
    $g[$pos] = $full;
    $pos++;
  }

  &switchLedsOn();
  $displaying = "stau";
}

sub displayTemperature {
  my $t = shift;
  my $full = $dimmed;

  my $div = 5;
  my $i;

  for ($i = 0; $i < $leds; $i++) {
    $b[$i] = 0;
    $r[$i] = 0;
    $g[$i] = 0;
  }

  $b[0] = $full;
  $b[1] = $full;

  my $ledson = int($t / $div);
  $ledson += 2;

  for ($i = 2; $i < $ledson; $i++) {
    $r[$i] = $full;
  }

  # $r[$ledson] = (1 << ($t % $div)) - 1  ;
  $r[$ledson] = ($t % $div)  ;

  &switchLedsOn();
  $displaying="temperature";
}

sub displayHumidity {
  my $t = shift;
  my $full = $dimmed;

  my $div = 50 / $leds; # 50 is max
  my $i;

  # all off
  for ($i = 0; $i < $leds; $i++) {
    $b[$i] = 0;
    $r[$i] = 0;
    $g[$i] = 0;
  }

  my $ledson = int($t / $div);

  for ($i = 0; $i < $ledson; $i++) {
    $g[$i] = $full;
    $b[$i] = $full;
  }

  $g[$ledson] = ($t % $div)  ;
  $b[$ledson] = ($t % $div)  ;

  print "Humidity: Last LED is " . ($t % $div) . "\n" if $debug;

  &switchLedsOn();
  $displaying="humidity";
}


